from .version import __version__ as __version__
from _typeshed import Incomplete

class ClosedError(Exception): ...

class _SocketProtocol:
    def __init__(self, packets_queue_max_size) -> None: ...
    def connection_made(self, transport) -> None: ...
    def connection_lost(self, transport) -> None: ...
    def datagram_received(self, data, addr) -> None: ...
    def error_received(self, exc) -> None: ...
    async def recvfrom(self): ...
    def raise_if_error(self) -> None: ...

class Socket:
    def __init__(self, transport, protocol) -> None: ...
    def close(self) -> None: ...
    def sendto(self, data, addr: Incomplete | None = None) -> None: ...
    async def recvfrom(self): ...
    def getsockname(self): ...
    async def __aenter__(self): ...
    async def __aexit__(self, *exc_info) -> None: ...

async def create_socket(local_addr: Incomplete | None = None, remote_addr: Incomplete | None = None, packets_queue_max_size: int = 0, reuse_port: Incomplete | None = None): ...
